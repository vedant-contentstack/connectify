import { describe, it, expect, vi } from "vitest";
import { render, screen } from "@testing-library/react";
import RootLayout, { metadata } from "../layout";
import React from "react";

// Mock the TRPC provider
vi.mock("@/trpc/client", () => ({
  TRPCReactProvider: ({ children }: { children: React.ReactNode }) => (
    <div data-testid="trpc-provider">{children}</div>
  ),
}));

// Mock the CSS import
vi.mock("../globals.css", () => ({}));

describe("RootLayout", () => {
  describe("Component rendering", () => {
    it("should render children", () => {
      render(
        <RootLayout>
          <div data-testid="test-child">Test Content</div>
        </RootLayout>
      );

      expect(screen.getByTestId("test-child")).toBeInTheDocument();
      expect(screen.getByText("Test Content")).toBeInTheDocument();
    });

    it("should wrap children in TRPCReactProvider", () => {
      render(
        <RootLayout>
          <div>Content</div>
        </RootLayout>
      );

      expect(screen.getByTestId("trpc-provider")).toBeInTheDocument();
    });

    it("should render html element with lang attribute", () => {
      const { container } = render(
        <RootLayout>
          <div>Content</div>
        </RootLayout>
      );

      const html = container.querySelector("html");
      expect(html).toBeInTheDocument();
      expect(html).toHaveAttribute("lang", "en");
    });

    it("should render body with font classes", () => {
      const { container } = render(
        <RootLayout>
          <div>Content</div>
        </RootLayout>
      );

      const body = container.querySelector("body");
      expect(body).toBeInTheDocument();
      expect(body?.className).toContain("antialiased");
    });

    it("should handle multiple children", () => {
      render(
        <RootLayout>
          <div data-testid="child1">Child 1</div>
          <div data-testid="child2">Child 2</div>
          <div data-testid="child3">Child 3</div>
        </RootLayout>
      );

      expect(screen.getByTestId("child1")).toBeInTheDocument();
      expect(screen.getByTestId("child2")).toBeInTheDocument();
      expect(screen.getByTestId("child3")).toBeInTheDocument();
    });

    it("should render with nested components", () => {
      const NestedComponent = () => (
        <div data-testid="nested">
          <span>Nested Content</span>
        </div>
      );

      render(
        <RootLayout>
          <NestedComponent />
        </RootLayout>
      );

      expect(screen.getByTestId("nested")).toBeInTheDocument();
      expect(screen.getByText("Nested Content")).toBeInTheDocument();
    });
  });

  describe("Metadata", () => {
    it("should export metadata object", () => {
      expect(metadata).toBeDefined();
      expect(typeof metadata).toBe("object");
    });

    it("should have correct title", () => {
      expect(metadata.title).toBe("Create Next App");
    });

    it("should have correct description", () => {
      expect(metadata.description).toBe("Generated by create next app");
    });

    it("should have all required metadata fields", () => {
      expect(metadata).toHaveProperty("title");
      expect(metadata).toHaveProperty("description");
    });

    it("should have string values for metadata", () => {
      expect(typeof metadata.title).toBe("string");
      expect(typeof metadata.description).toBe("string");
    });
  });

  describe("Props validation", () => {
    it("should accept readonly children prop", () => {
      const readonlyChildren = <div>Test</div> as Readonly<React.ReactNode>;

      expect(() => {
        render(<RootLayout>{readonlyChildren}</RootLayout>);
      }).not.toThrow();
    });

    it("should handle null children", () => {
      expect(() => {
        render(<RootLayout>{null}</RootLayout>);
      }).not.toThrow();
    });

    it("should handle undefined children", () => {
      expect(() => {
        render(<RootLayout>{undefined}</RootLayout>);
      }).not.toThrow();
    });

    it("should handle string children", () => {
      render(<RootLayout>Plain text content</RootLayout>);
      
      expect(screen.getByText("Plain text content")).toBeInTheDocument();
    });

    it("should handle number children", () => {
      render(<RootLayout>{42}</RootLayout>);
      
      expect(screen.getByText("42")).toBeInTheDocument();
    });

    it("should handle fragment children", () => {
      render(
        <RootLayout>
          <>
            <div data-testid="frag1">Fragment 1</div>
            <div data-testid="frag2">Fragment 2</div>
          </>
        </RootLayout>
      );

      expect(screen.getByTestId("frag1")).toBeInTheDocument();
      expect(screen.getByTestId("frag2")).toBeInTheDocument();
    });
  });

  describe("CSS and styling", () => {
    it("should apply antialiased class to body", () => {
      const { container } = render(
        <RootLayout>
          <div>Content</div>
        </RootLayout>
      );

      const body = container.querySelector("body");
      expect(body?.className).toContain("antialiased");
    });

    it("should include font variable classes", () => {
      const { container } = render(
        <RootLayout>
          <div>Content</div>
        </RootLayout>
      );

      const body = container.querySelector("body");
      const className = body?.className || "";
      
      // Should have font-related classes
      expect(className.length).toBeGreaterThan(0);
    });
  });

  describe("Document structure", () => {
    it("should render complete HTML structure", () => {
      const { container } = render(
        <RootLayout>
          <div data-testid="content">Content</div>
        </RootLayout>
      );

      expect(container.querySelector("html")).toBeInTheDocument();
      expect(container.querySelector("body")).toBeInTheDocument();
      expect(screen.getByTestId("content")).toBeInTheDocument();
    });

    it("should maintain proper nesting", () => {
      const { container } = render(
        <RootLayout>
          <div>Content</div>
        </RootLayout>
      );

      const html = container.querySelector("html");
      const body = container.querySelector("body");
      const provider = screen.getByTestId("trpc-provider");

      expect(html).toContainElement(body);
      expect(body).toContainElement(provider);
    });
  });

  describe("Edge cases", () => {
    it("should handle rapid re-renders", () => {
      const { rerender } = render(
        <RootLayout>
          <div data-testid="content">Initial</div>
        </RootLayout>
      );

      expect(screen.getByTestId("content")).toHaveTextContent("Initial");

      rerender(
        <RootLayout>
          <div data-testid="content">Updated</div>
        </RootLayout>
      );

      expect(screen.getByTestId("content")).toHaveTextContent("Updated");
    });

    it("should handle array of children", () => {
      const children = [
        <div key="1" data-testid="item1">Item 1</div>,
        <div key="2" data-testid="item2">Item 2</div>,
        <div key="3" data-testid="item3">Item 3</div>,
      ];

      render(<RootLayout>{children}</RootLayout>);

      expect(screen.getByTestId("item1")).toBeInTheDocument();
      expect(screen.getByTestId("item2")).toBeInTheDocument();
      expect(screen.getByTestId("item3")).toBeInTheDocument();
    });

    it("should handle complex nested structures", () => {
      render(
        <RootLayout>
          <div>
            <header>
              <nav>
                <ul>
                  <li data-testid="nav-item">Nav Item</li>
                </ul>
              </nav>
            </header>
            <main data-testid="main-content">Main Content</main>
            <footer data-testid="footer">Footer</footer>
          </div>
        </RootLayout>
      );

      expect(screen.getByTestId("nav-item")).toBeInTheDocument();
      expect(screen.getByTestId("main-content")).toBeInTheDocument();
      expect(screen.getByTestId("footer")).toBeInTheDocument();
    });
  });

  describe("Accessibility", () => {
    it("should have proper lang attribute for accessibility", () => {
      const { container } = render(
        <RootLayout>
          <div>Content</div>
        </RootLayout>
      );

      const html = container.querySelector("html");
      expect(html).toHaveAttribute("lang");
      expect(html?.getAttribute("lang")).toBe("en");
    });

    it("should render semantic HTML structure", () => {
      const { container } = render(
        <RootLayout>
          <main>
            <h1>Main Content</h1>
          </main>
        </RootLayout>
      );

      expect(container.querySelector("html")).toBeInTheDocument();
      expect(container.querySelector("body")).toBeInTheDocument();
      expect(container.querySelector("main")).toBeInTheDocument();
    });
  });
});